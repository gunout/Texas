# texas_real_estate.py
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

class TexasRealEstateAnalyzer:
    def __init__(self, region_name):
        self.region = region_name
        self.colors = ['#BF0A30', '#002868', '#666666', '#008751', '#FFA300', 
                      '#8B4513', '#228B22', '#FFD700', '#8A2BE2', '#DC143C']
        
        self.start_year = 2002
        self.end_year = 2025
        
        # Configuration sp√©cifique √† chaque r√©gion du Texas
        self.config = self._get_region_config()
        
    def _get_region_config(self):
        """Retourne la configuration sp√©cifique pour chaque r√©gion du Texas"""
        configs = {
            "Dallas-Fort Worth": {
                "population_base": 7600000,
                "budget_base": 9800,
                "type": "corporate_tech",
                "specialites": ["technologie", "finance", "corporate", "logistique", "defense"],
                "prix_m2_base": 3200,
                "segment_immobilier": "corporate_affordable",
                "currency": "USD",
                "major_cities": ["Dallas", "Fort Worth", "Arlington", "Plano"]
            },
            "Houston Metro": {
                "population_base": 7300000,
                "budget_base": 9200,
                "type": "energy_medical",
                "specialites": ["√©nergie", "p√©trole", "m√©decine", "port", "a√©rospatial"],
                "prix_m2_base": 2800,
                "segment_immobilier": "energy_driven",
                "currency": "USD",
                "major_cities": ["Houston", "The Woodlands", "Sugar Land", "Pearland"]
            },
            "Austin Area": {
                "population_base": 2300000,
                "budget_base": 4800,
                "type": "tech_innovation",
                "specialites": ["technologie", "innovation", "musique", "√©ducation", "startups"],
                "prix_m2_base": 4500,
                "segment_immobilier": "tech_boom",
                "currency": "USD",
                "major_cities": ["Austin", "Round Rock", "Cedar Park", "San Marcos"]
            },
            "San Antonio": {
                "population_base": 2600000,
                "budget_base": 3800,
                "type": "military_tourism",
                "specialites": ["militaire", "tourisme", "sant√©", "√©ducation", "culture"],
                "prix_m2_base": 2200,
                "segment_immobilier": "affordable_growth",
                "currency": "USD",
                "major_cities": ["San Antonio", "New Braunfels", "Schertz", "Converse"]
            },
            "El Paso Area": {
                "population_base": 850000,
                "budget_base": 1800,
                "type": "border_manufacturing",
                "specialites": ["manufacturing", "commerce_frontalier", "defense", "logistique", "services"],
                "prix_m2_base": 1500,
                "segment_immobilier": "border_affordable",
                "currency": "USD",
                "major_cities": ["El Paso", "Socorro", "Horizon City"]
            },
            "Rio Grande Valley": {
                "population_base": 1400000,
                "budget_base": 2200,
                "type": "agricultural_border",
                "specialites": ["agriculture", "commerce_frontalier", "tourisme", "sant√©", "√©ducation"],
                "prix_m2_base": 1200,
                "segment_immobilier": "rural_affordable",
                "currency": "USD",
                "major_cities": ["McAllen", "Brownsville", "Edinburg", "Harlingen"]
            },
            "West Texas": {
                "population_base": 600000,
                "budget_base": 1500,
                "type": "energy_agricultural",
                "specialites": ["√©nergie", "p√©trole", "agriculture", "√©levage", "√©olien"],
                "prix_m2_base": 1800,
                "segment_immobilier": "rural_energy",
                "currency": "USD",
                "major_cities": ["Midland", "Odessa", "Lubbock", "Amarillo"]
            },
            "Central Texas": {
                "population_base": 1200000,
                "budget_base": 2500,
                "type": "mixed_agricultural",
                "specialites": ["agriculture", "manufacturing", "√©ducation", "services", "tourisme_rural"],
                "prix_m2_base": 2000,
                "segment_immobilier": "rural_mixed",
                "currency": "USD",
                "major_cities": ["Waco", "Temple", "Killeen", "College Station"]
            },
            # Configuration par d√©faut
            "default": {
                "population_base": 1000000,
                "budget_base": 2000,
                "type": "mixed_development",
                "specialites": ["residentiel", "commerce_local", "services"],
                "prix_m2_base": 2500,
                "segment_immobilier": "mixed",
                "currency": "USD",
                "major_cities": ["Multiple cities"]
            }
        }
        
        return configs.get(self.region, configs["default"])
    
    def generate_financial_data(self):
        """G√©n√®re des donn√©es financi√®res et immobili√®res pour la r√©gion du Texas"""
        print(f"ü§† G√©n√©ration des donn√©es financi√®res et immobili√®res pour {self.region}, Texas...")
        
        # Cr√©er une base de donn√©es annuelle
        dates = pd.date_range(start=f'{self.start_year}-01-01', 
                             end=f'{self.end_year}-12-31', freq='Y')
        
        data = {'Year': [date.year for date in dates]}
        
        # Donn√©es d√©mographiques
        data['Population'] = self._simulate_population(dates)
        data['Households'] = self._simulate_households(dates)
        data['Median_Income'] = self._simulate_median_income(dates)
        
        # Recettes r√©gionales (en millions de dollars)
        data['Total_Revenue'] = self._simulate_total_revenue(dates)
        data['Property_Tax_Revenue'] = self._simulate_property_tax_revenue(dates)
        data['State_Federal_Funding'] = self._simulate_government_funding(dates)
        data['Business_Tax_Revenue'] = self._simulate_business_tax_revenue(dates)
        data['Energy_Revenue'] = self._simulate_energy_revenue(dates)
        data['Other_Revenue'] = self._simulate_other_revenue(dates)
        
        # D√©penses r√©gionales
        data['Total_Expenses'] = self._simulate_total_expenses(dates)
        data['Infrastructure_Expenses'] = self._simulate_infrastructure_expenses(dates)
        data['Public_Services_Expenses'] = self._simulate_public_services_expenses(dates)
        data['Education_Expenses'] = self._simulate_education_expenses(dates)
        data['Healthcare_Expenses'] = self._simulate_healthcare_expenses(dates)
        
        # Indicateurs financiers
        data['Budget_Surplus_Deficit'] = self._simulate_budget_balance(dates)
        data['Regional_Debt'] = self._simulate_regional_debt(dates)
        data['Debt_to_Revenue_Ratio'] = self._simulate_debt_ratio(dates)
        
        # Donn√©es immobili√®res (sp√©cifiques au Texas)
        data['Median_Home_Price'] = self._simulate_median_home_price(dates)
        data['Price_per_Sqft'] = self._simulate_price_per_sqft(dates)
        data['Home_Sales_Volume'] = self._simulate_home_sales(dates)
        data['New_Construction_Permits'] = self._simulate_construction_permits(dates)
        data['Rental_Vacancy_Rate'] = self._simulate_vacancy_rate(dates)
        data['Average_Rent'] = self._simulate_average_rent(dates)
        
        # Investissements sp√©cifiques adapt√©s au Texas
        data['Energy_Investment'] = self._simulate_energy_investment(dates)
        data['Tech_Investment'] = self._simulate_tech_investment(dates)
        data['Infrastructure_Investment'] = self._simulate_infrastructure_investment(dates)
        data['Housing_Development_Investment'] = self._simulate_housing_investment(dates)
        data['Manufacturing_Investment'] = self._simulate_manufacturing_investment(dates)
        data['Agricultural_Investment'] = self._simulate_agricultural_investment(dates)
        
        df = pd.DataFrame(data)
        
        # Ajouter des tendances sp√©cifiques au march√© texan
        self._add_texas_trends(df)
        
        return df
    
    def _simulate_population(self, dates):
        """Simule la population de la r√©gion"""
        base_population = self.config["population_base"]
        
        population = []
        for i, date in enumerate(dates):
            # Croissance d√©mographique texane (tr√®s forte croissance)
            if self.config["type"] == "tech_innovation":
                growth_rate = 0.028  # Tr√®s forte croissance √† Austin
            elif self.config["type"] == "corporate_tech":
                growth_rate = 0.022  # Forte croissance √† DFW
            elif self.config["type"] == "energy_medical":
                growth_rate = 0.020  # Croissance forte √† Houston
            else:
                growth_rate = 0.015  # Croissance mod√©r√©e ailleurs
                
            growth = 1 + growth_rate * i
            population.append(base_population * growth)
        
        return population
    
    def _simulate_households(self, dates):
        """Simule le nombre de m√©nages"""
        base_households = self.config["population_base"] / 2.7  # Taille moyenne des m√©nages au Texas
        
        households = []
        for i, date in enumerate(dates):
            growth = 1 + 0.016 * i
            households.append(base_households * growth)
        
        return households
    
    def _simulate_median_income(self, dates):
        """Simule le revenu m√©dian"""
        # Revenu m√©dian de base selon la r√©gion
        if self.config["type"] == "tech_innovation":
            base_income = 85000
        elif self.config["type"] == "corporate_tech":
            base_income = 75000
        elif self.config["type"] == "energy_medical":
            base_income = 70000
        else:
            base_income = 55000
        
        incomes = []
        for i, date in enumerate(dates):
            year = date.year
            # Croissance du revenu avec des variations
            if 2002 <= year <= 2008:
                growth = 1 + 0.040 * (year - 2002)  # Forte croissance √©nergie
            elif 2009 <= year <= 2010:
                growth = 1 - 0.020 * (year - 2009)  # L√©g√®re baisse crise
            elif 2011 <= year <= 2014:
                growth = 1 + 0.045 * (year - 2011)  # Boom √©nergie
            elif 2015 <= year <= 2016:
                growth = 1 - 0.015  # Baisse prix p√©trole
            elif 2017 <= year <= 2019:
                growth = 1 + 0.038 * (year - 2017)
            elif 2020 <= year <= 2021:
                growth = 1 - 0.010  # Impact COVID mod√©r√©
            else:
                growth = 1 + 0.042 * (year - 2022)
            
            noise = np.random.normal(1, 0.05)
            incomes.append(base_income * growth * noise)
        
        return incomes
    
    def _simulate_total_revenue(self, dates):
        """Simule les recettes totales de la r√©gion"""
        base_revenue = self.config["budget_base"]
        
        revenue = []
        for i, date in enumerate(dates):
            # Croissance √©conomique texane
            if self.config["type"] == "tech_innovation":
                growth_rate = 0.065  # Croissance explosive √† Austin
            elif self.config["type"] == "corporate_tech":
                growth_rate = 0.055  # Croissance forte √† DFW
            elif self.config["type"] == "energy_medical":
                growth_rate = 0.050  # Croissance variable √† Houston
            else:
                growth_rate = 0.042  # Croissance moyenne
                
            growth = 1 + growth_rate * i
            noise = np.random.normal(1, 0.12)  # Plus volatile d√ª √† l'√©nergie
            revenue.append(base_revenue * growth * noise)
        
        return revenue
    
    def _simulate_property_tax_revenue(self, dates):
        """Simule les recettes de taxe fonci√®re (pas de taxe sur le revenu au Texas)"""
        base_tax = self.config["budget_base"] * 0.45  # Tr√®s important au Texas
        
        tax_revenue = []
        for i, date in enumerate(dates):
            growth = 1 + 0.035 * i
            noise = np.random.normal(1, 0.08)
            tax_revenue.append(base_tax * growth * noise)
        
        return tax_revenue
    
    def _simulate_government_funding(self, dates):
        """Simule le financement √©tatique et f√©d√©ral"""
        base_funding = self.config["budget_base"] * 0.20
        
        funding = []
        for i, date in enumerate(dates):
            year = date.year
            if year >= 2010:
                increase = 1 + 0.012 * (year - 2010)
            else:
                increase = 1
            
            noise = np.random.normal(1, 0.08)
            funding.append(base_funding * increase * noise)
        
        return funding
    
    def _simulate_business_tax_revenue(self, dates):
        """Simule les recettes fiscales des entreprises"""
        base_business_tax = self.config["budget_base"] * 0.18
        
        business_tax = []
        for i, date in enumerate(dates):
            multiplier = 1.4 if "technologie" in self.config["specialites"] else 1.2 if "√©nergie" in self.config["specialites"] else 1.0
            
            growth = 1 + 0.048 * i
            noise = np.random.normal(1, 0.15)
            business_tax.append(base_business_tax * growth * multiplier * noise)
        
        return business_tax
    
    def _simulate_energy_revenue(self, dates):
        """Simule les recettes √©nerg√©tiques (sp√©cifique au Texas)"""
        base_energy = self.config["budget_base"] * 0.12
        
        multiplier = 2.5 if "√©nergie" in self.config["specialites"] else 0.3
        
        energy_revenue = []
        for i, date in enumerate(dates):
            year = date.year
            
            # Volatilit√© selon les prix de l'√©nergie
            if 2002 <= year <= 2008:
                energy_multiplier = 1 + 0.15 * (year - 2002)  # Boom p√©trole
            elif 2009 <= year <= 2010:
                energy_multiplier = 0.70  # Crise financi√®re
            elif 2011 <= year <= 2014:
                energy_multiplier = 1 + 0.12 * (year - 2011)  # Reprise
            elif 2015 <= year <= 2016:
                energy_multiplier = 0.60  # Effondrement prix p√©trole
            elif 2017 <= year <= 2019:
                energy_multiplier = 1 + 0.08 * (year - 2017)  # Reprise mod√©r√©e
            elif 2020 <= year <= 2021:
                energy_multiplier = 0.75  # COVID + crise p√©trole
            else:
                energy_multiplier = 1 + 0.10 * (year - 2022)  # Reprise forte
            
            growth = 1 + 0.030 * i
            noise = np.random.normal(1, 0.25)  # Tr√®s volatile
            energy_revenue.append(base_energy * growth * energy_multiplier * multiplier * noise)
        
        return energy_revenue
    
    def _simulate_other_revenue(self, dates):
        """Simule les autres recettes"""
        base_other = self.config["budget_base"] * 0.05
        
        other_revenue = []
        for i, date in enumerate(dates):
            growth = 1 + 0.028 * i
            noise = np.random.normal(1, 0.10)
            other_revenue.append(base_other * growth * noise)
        
        return other_revenue
    
    def _simulate_total_expenses(self, dates):
        """Simule les d√©penses totales"""
        base_expenses = self.config["budget_base"] * 0.88  # Texas a des d√©penses plus faibles
        
        expenses = []
        for i, date in enumerate(dates):
            growth = 1 + 0.038 * i
            noise = np.random.normal(1, 0.06)
            expenses.append(base_expenses * growth * noise)
        
        return expenses
    
    def _simulate_infrastructure_expenses(self, dates):
        """Simule les d√©penses d'infrastructure"""
        base_infra = self.config["budget_base"] * 0.20
        
        infra_expenses = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2005, 2013, 2018, 2023]:
                multiplier = 1.8  # Ann√©es de grands projets
            else:
                multiplier = 1.0
            
            growth = 1 + 0.040 * i
            noise = np.random.normal(1, 0.18)
            infra_expenses.append(base_infra * growth * multiplier * noise)
        
        return infra_expenses
    
    def _simulate_public_services_expenses(self, dates):
        """Simule les d√©penses de services publics"""
        base_services = self.config["budget_base"] * 0.25
        
        services = []
        for i, date in enumerate(dates):
            growth = 1 + 0.032 * i
            noise = np.random.normal(1, 0.04)
            services.append(base_services * growth * noise)
        
        return services
    
    def _simulate_education_expenses(self, dates):
        """Simule les d√©penses √©ducatives"""
        base_education = self.config["budget_base"] * 0.28  # Important au Texas
        
        education = []
        for i, date in enumerate(dates):
            growth = 1 + 0.036 * i
            noise = np.random.normal(1, 0.05)
            education.append(base_education * growth * noise)
        
        return education
    
    def _simulate_healthcare_expenses(self, dates):
        """Simule les d√©penses de sant√©"""
        base_healthcare = self.config["budget_base"] * 0.15
        
        healthcare = []
        for i, date in enumerate(dates):
            growth = 1 + 0.040 * i
            noise = np.random.normal(1, 0.06)
            healthcare.append(base_healthcare * growth * noise)
        
        return healthcare
    
    def _simulate_budget_balance(self, dates):
        """Simule le surplus/d√©ficit budg√©taire"""
        balance = []
        for i, date in enumerate(dates):
            base_balance = self.config["budget_base"] * 0.12  # Texas a g√©n√©ralement des surplus
            
            year = date.year
            if year >= 2010:
                improvement = 1 + 0.015 * (year - 2010)
            else:
                improvement = 1
            
            noise = np.random.normal(1, 0.15)
            balance.append(base_balance * improvement * noise)
        
        return balance
    
    def _simulate_regional_debt(self, dates):
        """Simule la dette r√©gionale"""
        base_debt = self.config["budget_base"] * 0.45  # Dette faible au Texas
        
        debt = []
        for i, date in enumerate(dates):
            year = date.year
            if year >= 2012:
                reduction = 1 - 0.020 * (year - 2012)
            else:
                reduction = 1.0
            
            noise = np.random.normal(1, 0.07)
            debt.append(base_debt * reduction * noise)
        
        return debt
    
    def _simulate_debt_ratio(self, dates):
        """Simule le ratio d'endettement"""
        ratios = []
        for i, date in enumerate(dates):
            base_ratio = 0.40  # Ratio faible
            
            year = date.year
            if year >= 2012:
                improvement = 1 - 0.022 * (year - 2012)
            else:
                improvement = 1
            
            noise = np.random.normal(1, 0.06)
            ratios.append(base_ratio * improvement * noise)
        
        return ratios
    
    def _simulate_median_home_price(self, dates):
        """Simule le prix m√©dian des maisons (sp√©cifique au Texas)"""
        base_price = self.config["prix_m2_base"] * 200  # Maisons plus grandes au Texas
        
        prices = []
        for i, date in enumerate(dates):
            year = date.year
            
            # Croissance du march√© immobilier texan
            if self.config["segment_immobilier"] == "tech_boom":
                growth_rate = 0.085  # Croissance explosive √† Austin
            elif self.config["segment_immobilier"] == "corporate_affordable":
                growth_rate = 0.055  # Croissance forte √† DFW
            elif self.config["segment_immobilier"] == "energy_driven":
                growth_rate = 0.048  # Croissance volatile √† Houston
            else:
                growth_rate = 0.040  # Croissance mod√©r√©e
            
            # Ajustements annuels bas√©s sur des √©v√©nements r√©els
            if 2002 <= year <= 2007:
                multiplier = 1 + 0.08 * (year - 2002)  # Boom pr√©-crise
            elif 2008 <= year <= 2009:
                multiplier = 0.90  # L√©g√®re baisse (Texas r√©silient)
            elif 2010 <= year <= 2014:
                multiplier = 1 + 0.10 * (year - 2010)  # Forte reprise
            elif 2015 <= year <= 2016:
                multiplier = 0.95  # L√©g√®re baisse √©nergie
            elif 2017 <= year <= 2019:
                multiplier = 1 + 0.07 * (year - 2017)  # Croissance forte
            elif 2020 <= year <= 2021:
                multiplier = 1.02  # Texas r√©silient pendant COVID
            else:
                multiplier = 1 + 0.09 * (year - 2022)  # Boom post-COVID
            
            growth = 1 + growth_rate * i
            noise = np.random.normal(1, 0.10)
            prices.append(base_price * growth * multiplier * noise)
        
        return prices
    
    def _simulate_price_per_sqft(self, dates):
        """Simule le prix au pied carr√©"""
        base_price_sqft = self.config["prix_m2_base"] / 10.764
        
        prices = []
        for i, date in enumerate(dates):
            median_price = self._simulate_median_home_price([date])[0]
            avg_home_size = 200 * 10.764  # 200m¬≤ en pieds carr√©s
            prices.append(median_price / avg_home_size)
        
        return prices
    
    def _simulate_home_sales(self, dates):
        """Simule le volume des ventes immobili√®res"""
        base_sales = self.config["population_base"] / 100  # March√© actif au Texas
        
        sales = []
        for i, date in enumerate(dates):
            year = date.year
            
            if 2002 <= year <= 2006:
                multiplier = 1 + 0.12 * (year - 2002)
            elif 2007 <= year <= 2009:
                multiplier = 0.80  # Baisse mod√©r√©e
            elif 2010 <= year <= 2019:
                multiplier = 1 + 0.10 * (year - 2010)
            elif 2020 <= year <= 2021:
                multiplier = 0.90  # L√©g√®re baisse COVID
            else:
                multiplier = 1 + 0.11 * (year - 2022)
            
            growth = 1 + 0.018 * i
            noise = np.random.normal(1, 0.14)
            sales.append(base_sales * growth * multiplier * noise)
        
        return sales
    
    def _simulate_construction_permits(self, dates):
        """Simule les permis de construction"""
        base_permits = self.config["population_base"] / 400  # Forte construction au Texas
        
        permits = []
        for i, date in enumerate(dates):
            year = date.year
            
            if year in [2005, 2013, 2018, 2022, 2024]:
                multiplier = 2.0  # Ann√©es de forte construction
            elif year in [2008, 2015, 2020]:
                multiplier = 0.7  # Ann√©es de ralentissement
            else:
                multiplier = 1.0
            
            growth = 1 + 0.025 * i
            noise = np.random.normal(1, 0.20)
            permits.append(base_permits * growth * multiplier * noise)
        
        return permits
    
    def _simulate_vacancy_rate(self, dates):
        """Simule le taux d'inoccupation locative"""
        base_vacancy = 6.0  # Plus √©lev√© au Texas d√ª √† plus de construction
        
        vacancies = []
        for i, date in enumerate(dates):
            year = date.year
            
            if 2002 <= year <= 2006:
                rate = base_vacancy - 0.8 * (year - 2002)
            elif 2007 <= year <= 2010:
                rate = base_vacancy + 1.5
            elif 2011 <= year <= 2019:
                rate = base_vacancy - 0.4 * (year - 2011)
            elif 2020 <= year <= 2021:
                rate = base_vacancy + 1.0
            else:
                rate = base_vacancy - 0.3 * (year - 2022)
            
            noise = np.random.normal(0, 0.4)
            vacancies.append(max(2.0, rate + noise))  # Minimum 2%
        
        return vacancies
    
    def _simulate_average_rent(self, dates):
        """Simule le loyer moyen"""
        base_rent = self.config["prix_m2_base"] / 40  # Loyer plus abordable au Texas
        
        rents = []
        for i, date in enumerate(dates):
            year = date.year
            
            if 2002 <= year <= 2007:
                growth = 1 + 0.035 * (year - 2002)
            elif 2008 <= year <= 2010:
                growth = 1 - 0.010 * (year - 2008)
            elif 2011 <= year <= 2019:
                growth = 1 + 0.040 * (year - 2011)
            elif 2020 <= year <= 2021:
                growth = 1 + 0.005  # L√©g√®re hausse
            else:
                growth = 1 + 0.045 * (year - 2022)
            
            noise = np.random.normal(1, 0.06)
            rents.append(base_rent * growth * noise)
        
        return rents
    
    def _simulate_energy_investment(self, dates):
        """Simule l'investissement √©nerg√©tique (sp√©cifique au Texas)"""
        base_investment = self.config["budget_base"] * 0.15
        
        multiplier = 3.0 if "√©nergie" in self.config["specialites"] else 0.4
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2003, 2008, 2012, 2017, 2021]:
                year_multiplier = 2.2
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.055 * i
            noise = np.random.normal(1, 0.30)  # Tr√®s volatile
            investment.append(base_investment * growth * year_multiplier * multiplier * noise)
        
        return investment
    
    def _simulate_tech_investment(self, dates):
        """Simule l'investissement technologique"""
        base_investment = self.config["budget_base"] * 0.12
        
        multiplier = 2.5 if "technologie" in self.config["specialites"] else 0.8
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2005, 2010, 2015, 2020, 2023]:
                year_multiplier = 1.9
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.070 * i
            noise = np.random.normal(1, 0.18)
            investment.append(base_investment * growth * year_multiplier * multiplier * noise)
        
        return investment
    
    def _simulate_infrastructure_investment(self, dates):
        """Simule l'investissement en infrastructure"""
        base_investment = self.config["budget_base"] * 0.20
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2004, 2011, 2016, 2022]:
                year_multiplier = 1.8
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.045 * i
            noise = np.random.normal(1, 0.15)
            investment.append(base_investment * growth * year_multiplier * noise)
        
        return investment
    
    def _simulate_housing_investment(self, dates):
        """Simule l'investissement dans le logement"""
        base_investment = self.config["budget_base"] * 0.18  # Important au Texas
        
        multiplier = 1.5  # Texas a une forte construction
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2006, 2013, 2019, 2024]:
                year_multiplier = 1.8
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.050 * i
            noise = np.random.normal(1, 0.20)
            investment.append(base_investment * growth * year_multiplier * multiplier * noise)
        
        return investment
    
    def _simulate_manufacturing_investment(self, dates):
        """Simule l'investissement manufacturier"""
        base_investment = self.config["budget_base"] * 0.10
        
        multiplier = 1.8 if "manufacturing" in self.config["specialites"] else 0.7
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2007, 2014, 2018, 2023]:
                year_multiplier = 1.7
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.038 * i
            noise = np.random.normal(1, 0.16)
            investment.append(base_investment * growth * year_multiplier * multiplier * noise)
        
        return investment
    
    def _simulate_agricultural_investment(self, dates):
        """Simule l'investissement agricole"""
        base_investment = self.config["budget_base"] * 0.08
        
        multiplier = 2.2 if "agriculture" in self.config["specialites"] else 0.9
        
        investment = []
        for i, date in enumerate(dates):
            year = date.year
            if year in [2009, 2012, 2017, 2021]:
                year_multiplier = 1.6
            else:
                year_multiplier = 1.0
            
            growth = 1 + 0.032 * i
            noise = np.random.normal(1, 0.19)
            investment.append(base_investment * growth * year_multiplier * multiplier * noise)
        
        return investment
    
    def _add_texas_trends(self, df):
        """Ajoute des tendances r√©alistes adapt√©es au march√© texan"""
        for i, row in df.iterrows():
            year = row['Year']
            
            # Boom p√©trolier (2003-2008, 2011-2014)
            if (2003 <= year <= 2008) or (2011 <= year <= 2014):
                if "√©nergie" in self.config["specialites"]:
                    df.loc[i, 'Energy_Revenue'] *= 1.8
                    df.loc[i, 'Median_Income'] *= 1.10
                    df.loc[i, 'Population'] *= 1.03
            
            # Crise financi√®re (2008-2009) - impact mod√©r√© au Texas
            if 2008 <= year <= 2009:
                df.loc[i, 'Median_Home_Price'] *= 0.90
                df.loc[i, 'Home_Sales_Volume'] *= 0.80
                df.loc[i, 'Energy_Investment'] *= 0.70
            
            # Effondrement prix p√©trole (2015-2016)
            if 2015 <= year <= 2016:
                if "√©nergie" in self.config["specialites"]:
                    df.loc[i, 'Energy_Revenue'] *= 0.40
                    df.loc[i, 'Median_Home_Price'] *= 0.92
                    df.loc[i, 'Population'] *= 0.99
            
            # Boom tech √† Austin (2015-pr√©sent)
            if year >= 2015 and "technologie" in self.config["specialites"]:
                df.loc[i, 'Tech_Investment'] *= 2.2
                df.loc[i, 'Median_Home_Price'] *= 1.15
                df.loc[i, 'Population'] *= 1.04
            
            # Croissance d√©mographique forte (constant)
            if year >= 2010:
                df.loc[i, 'Housing_Development_Investment'] *= 1.4
                df.loc[i, 'New_Construction_Permits'] *= 1.3
            
            # Impact COVID-19 (2020-2021)
            if 2020 <= year <= 2021:
                if year == 2020:
                    df.loc[i, 'Energy_Revenue'] *= 0.60
                    df.loc[i, 'Home_Sales_Volume'] *= 0.85
                else:
                    # Reprise forte au Texas
                    df.loc[i, 'Median_Home_Price'] *= 1.08
                    df.loc[i, 'Population'] *= 1.02
            
            # Boom post-COVID (2022-pr√©sent)
            if year >= 2022:
                df.loc[i, 'Tech_Investment'] *= 1.3
                df.loc[i, 'Manufacturing_Investment'] *= 1.4
                df.loc[i, 'Infrastructure_Investment'] *= 1.5
    
    def create_financial_analysis(self, df):
        """Cr√©e une analyse compl√®te des finances et de l'immobilier texan"""
        plt.style.use('seaborn-v0_8')
        fig = plt.figure(figsize=(20, 28))
        
        # 1. √âvolution des prix immobiliers
        ax1 = plt.subplot(5, 2, 1)
        self._plot_real_estate_prices(df, ax1)
        
        # 2. Activit√© immobili√®re
        ax2 = plt.subplot(5, 2, 2)
        self._plot_real_estate_activity(df, ax2)
        
        # 3. √âvolution des recettes et d√©penses
        ax3 = plt.subplot(5, 2, 3)
        self._plot_revenue_expenses(df, ax3)
        
        # 4. Structure des recettes (avec √©nergie)
        ax4 = plt.subplot(5, 2, 4)
        self._plot_revenue_structure(df, ax4)
        
        # 5. March√© locatif
        ax5 = plt.subplot(5, 2, 5)
        self._plot_rental_market(df, ax5)
        
        # 6. Investissements r√©gionaux
        ax6 = plt.subplot(5, 2, 6)
        self._plot_regional_investments(df, ax6)
        
        # 7. D√©mographie et revenus
        ax7 = plt.subplot(5, 2, 7)
        self._plot_demography_income(df, ax7)
        
        # 8. Dette et √©quilibre budg√©taire
        ax8 = plt.subplot(5, 2, 8)
        self._plot_debt_budget(df, ax8)
        
        # 9. Construction et d√©veloppement
        ax9 = plt.subplot(5, 2, 9)
        self._plot_construction_development(df, ax9)
        
        # 10. Investissements sectoriels
        ax10 = plt.subplot(5, 2, 10)
        self._plot_sectorial_investments(df, ax10)
        
        plt.suptitle(f'Financial and Real Estate Analysis of {self.region}, Texas ({self.start_year}-{self.end_year})', 
                    fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.savefig(f'{self.region.replace(" ", "_").lower()}_texas_analysis.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        # G√©n√©rer les insights
        self._generate_texas_insights(df)
    
    def _plot_real_estate_prices(self, df, ax):
        """Plot de l'√©volution des prix immobiliers"""
        ax.plot(df['Year'], df['Median_Home_Price']/1000, label='Median Home Price', 
               linewidth=3, color='#BF0A30', alpha=0.8)
        
        ax.set_title('Median Home Price Evolution (Thousand $)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Price (Thousand $)')
        ax.grid(True, alpha=0.3)
        
        # Ajouter des annotations pour les √©v√©nements marquants
        ax.annotate('Oil Boom', xy=(2006, df.loc[df['Year'] == 2006, 'Median_Home_Price'].values[0]/1000), 
                   xytext=(2006, df.loc[df['Year'] == 2006, 'Median_Home_Price'].values[0]/1000 * 0.8),
                   arrowprops=dict(arrowstyle='->', color='red'))
        
        ax.annotate('Tech Boom', xy=(2018, df.loc[df['Year'] == 2018, 'Median_Home_Price'].values[0]/1000), 
                   xytext=(2018, df.loc[df['Year'] == 2018, 'Median_Home_Price'].values[0]/1000 * 1.4),
                   arrowprops=dict(arrowstyle='->', color='green'))
    
    def _plot_real_estate_activity(self, df, ax):
        """Plot de l'activit√© immobili√®re"""
        ax.bar(df['Year'], df['Home_Sales_Volume'], label='Home Sales', 
              color='#002868', alpha=0.7)
        
        ax.set_title('Real Estate Market Activity', fontsize=12, fontweight='bold')
        ax.set_ylabel('Home Sales Volume', color='#002868')
        ax.tick_params(axis='y', labelcolor='#002868')
        ax.grid(True, alpha=0.3, axis='y')
        
        ax2 = ax.twinx()
        ax2.plot(df['Year'], df['Price_per_Sqft'], label='Price per Sqft', 
                linewidth=2, color='#BF0A30')
        ax2.set_ylabel('Price per Sqft ($)', color='#BF0A30')
        ax2.tick_params(axis='y', labelcolor='#BF0A30')
        
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_revenue_expenses(self, df, ax):
        """Plot de l'√©volution des recettes et d√©penses"""
        ax.plot(df['Year'], df['Total_Revenue'], label='Total Revenue', 
               linewidth=2, color='#002868', alpha=0.8)
        ax.plot(df['Year'], df['Total_Expenses'], label='Total Expenses', 
               linewidth=2, color='#BF0A30', alpha=0.8)
        
        ax.set_title('Revenue and Expenses Evolution (M$)', 
                    fontsize=12, fontweight='bold')
        ax.set_ylabel('Amount (M$)')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_revenue_structure(self, df, ax):
        """Plot de la structure des recettes (avec √©nergie)"""
        years = df['Year']
        width = 0.8
        
        bottom = np.zeros(len(years))
        categories = ['Property_Tax_Revenue', 'State_Federal_Funding', 'Business_Tax_Revenue', 'Energy_Revenue', 'Other_Revenue']
        colors = ['#002868', '#BF0A30', '#666666', '#008751', '#FFA300']
        labels = ['Property Tax', 'Govt Funding', 'Business Tax', 'Energy Revenue', 'Other Revenue']
        
        for i, category in enumerate(categories):
            ax.bar(years, df[category], width, label=labels[i], bottom=bottom, color=colors[i])
            bottom += df[category]
        
        ax.set_title('Revenue Structure (M$)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Amount (M$)')
        ax.legend()
        ax.grid(True, alpha=0.3, axis='y')
    
    def _plot_rental_market(self, df, ax):
        """Plot du march√© locatif"""
        ax.plot(df['Year'], df['Average_Rent'], label='Average Rent', 
               linewidth=2, color='#008751', alpha=0.8)
        
        ax.set_title('Rental Market Analysis', fontsize=12, fontweight='bold')
        ax.set_ylabel('Average Rent ($)', color='#008751')
        ax.tick_params(axis='y', labelcolor='#008751')
        ax.grid(True, alpha=0.3)
        
        ax2 = ax.twinx()
        ax2.plot(df['Year'], df['Rental_Vacancy_Rate'], label='Vacancy Rate', 
                linewidth=2, color='#BF0A30', alpha=0.8)
        ax2.set_ylabel('Vacancy Rate (%)', color='#BF0A30')
        ax2.tick_params(axis='y', labelcolor='#BF0A30')
        
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_regional_investments(self, df, ax):
        """Plot des investissements r√©gionaux"""
        ax.plot(df['Year'], df['Tech_Investment'], label='Technology', 
               linewidth=2, color='#002868', alpha=0.8)
        ax.plot(df['Year'], df['Energy_Investment'], label='Energy', 
               linewidth=2, color='#BF0A30', alpha=0.8)
        ax.plot(df['Year'], df['Infrastructure_Investment'], label='Infrastructure', 
               linewidth=2, color='#008751', alpha=0.8)
        ax.plot(df['Year'], df['Housing_Development_Investment'], label='Housing', 
               linewidth=2, color='#FFA300', alpha=0.8)
        
        ax.set_title('Regional Investments Distribution (M$)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Amount (M$)')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_demography_income(self, df, ax):
        """Plot de la d√©mographie et des revenus"""
        ax.plot(df['Year'], df['Population']/1000, label='Population', 
               linewidth=2, color='#002868', alpha=0.8)
        
        ax.set_title('Demography and Income Trends', fontsize=12, fontweight='bold')
        ax.set_ylabel('Population (Thousand)', color='#002868')
        ax.tick_params(axis='y', labelcolor='#002868')
        ax.grid(True, alpha=0.3)
        
        ax2 = ax.twinx()
        ax2.plot(df['Year'], df['Median_Income']/1000, label='Median Income', 
                linewidth=2, color='#BF0A30', alpha=0.8)
        ax2.set_ylabel('Median Income (Thousand $)', color='#BF0A30')
        ax2.tick_params(axis='y', labelcolor='#BF0A30')
        
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_debt_budget(self, df, ax):
        """Plot de la dette et de l'√©quilibre budg√©taire"""
        ax.bar(df['Year'], df['Regional_Debt'], label='Regional Debt (M$)', 
              color='#002868', alpha=0.7)
        
        ax.set_title('Regional Debt and Budget Balance', fontsize=12, fontweight='bold')
        ax.set_ylabel('Debt (M$)', color='#002868')
        ax.tick_params(axis='y', labelcolor='#002868')
        ax.grid(True, alpha=0.3, axis='y')
        
        ax2 = ax.twinx()
        ax2.plot(df['Year'], df['Budget_Surplus_Deficit'], label='Budget Balance', 
                linewidth=3, color='#008751')
        ax2.set_ylabel('Budget Balance (M$)', color='#008751')
        ax2.tick_params(axis='y', labelcolor='#008751')
        
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_construction_development(self, df, ax):
        """Plot de la construction et du d√©veloppement"""
        ax.bar(df['Year'], df['New_Construction_Permits'], label='Construction Permits', 
              color='#FFA300', alpha=0.7)
        
        ax.set_title('Construction and Development Activity', fontsize=12, fontweight='bold')
        ax.set_ylabel('New Construction Permits', color='#FFA300')
        ax.tick_params(axis='y', labelcolor='#FFA300')
        ax.grid(True, alpha=0.3, axis='y')
        
        ax2 = ax.twinx()
        ax2.plot(df['Year'], df['Housing_Development_Investment'], label='Housing Investment', 
                linewidth=2, color='#BF0A30')
        ax2.set_ylabel('Housing Investment (M$)', color='#BF0A30')
        ax2.tick_params(axis='y', labelcolor='#BF0A30')
        
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_sectorial_investments(self, df, ax):
        """Plot des investissements sectoriels"""
        years = df['Year']
        width = 0.8
        
        bottom = np.zeros(len(years))
        categories = ['Tech_Investment', 'Energy_Investment', 'Infrastructure_Investment', 
                     'Housing_Development_Investment', 'Manufacturing_Investment', 'Agricultural_Investment']
        
        colors = ['#002868', '#BF0A30', '#008751', '#FFA300', '#666666', '#8B4513']
        labels = ['Technology', 'Energy', 'Infrastructure', 'Housing', 'Manufacturing', 'Agriculture']
        
        for i, category in enumerate(categories):
            ax.bar(years, df[category], width, label=labels[i], bottom=bottom, color=colors[i])
            bottom += df[category]
        
        ax.set_title('Sectorial Investments Distribution (M$)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Amount (M$)')
        ax.legend()
        ax.grid(True, alpha=0.3, axis='y')
    
    def _generate_texas_insights(self, df):
        """G√©n√®re des insights analytiques adapt√©s au march√© texan"""
        print(f"ü§† TEXAS REAL ESTATE INSIGHTS - {self.region}")
        print("=" * 65)
        
        # 1. Statistiques de base
        print("\n1. üìà KEY STATISTICS:")
        avg_home_price = df['Median_Home_Price'].mean()
        avg_income = df['Median_Income'].mean()
        avg_rent = df['Average_Rent'].mean()
        price_to_income_ratio = avg_home_price / avg_income
        
        print(f"Average median home price: ${avg_home_price:,.0f}")
        print(f"Average median income: ${avg_income:,.0f}")
        print(f"Average rent: ${avg_rent:.0f}")
        print(f"Price-to-income ratio: {price_to_income_ratio:.1f}")
        
        # 2. Croissance immobili√®re
        print("\n2. üìä REAL ESTATE GROWTH:")
        price_growth = ((df['Median_Home_Price'].iloc[-1] / 
                        df['Median_Home_Price'].iloc[0]) - 1) * 100
        population_growth = ((df['Population'].iloc[-1] / 
                             df['Population'].iloc[0]) - 1) * 100
        
        print(f"Home price growth ({self.start_year}-{self.end_year}): {price_growth:.1f}%")
        print(f"Population growth ({self.start_year}-{self.end_year}): {population_growth:.1f}%")
        
        # 3. Accessibilit√© du logement
        print("\n3. üè† HOUSING AFFORDABILITY:")
        current_price = df['Median_Home_Price'].iloc[-1]
        current_income = df['Median_Income'].iloc[-1]
        current_ratio = current_price / current_income
        
        affordability_status = "Critical" if current_ratio > 5 else "Severe" if current_ratio > 4 else "Moderate" if current_ratio > 3 else "Good"
        print(f"Current price-to-income ratio: {current_ratio:.1f} ({affordability_status})")
        
        # 4. March√© locatif
        print("\n4. üè¢ RENTAL MARKET:")
        current_vacancy = df['Rental_Vacancy_Rate'].iloc[-1]
        rent_growth = ((df['Average_Rent'].iloc[-1] / df['Average_Rent'].iloc[0]) - 1) * 100
        
        print(f"Current vacancy rate: {current_vacancy:.1f}%")
        print(f"Rent growth ({self.start_year}-{self.end_year}): {rent_growth:.1f}%")
        
        # 5. Sp√©cificit√©s r√©gionales
        print(f"\n5. üåü {self.region.upper()} SPECIFICS:")
        print(f"Region type: {self.config['type']}")
        print(f"Specializations: {', '.join(self.config['specialites'])}")
        print(f"Major cities: {', '.join(self.config['major_cities'])}")
        print(f"Real estate segment: {self.config['segment_immobilier']}")
        
        # 6. √âv√©nements marquants du march√© texan
        print("\n6. üìÖ KEY TEXAS REAL ESTATE EVENTS:")
        print("‚Ä¢ 2002-2008: Oil and gas boom driving growth")
        print("‚Ä¢ 2008-2009: Mild impact from financial crisis")
        print("‚Ä¢ 2010-2014: Shale revolution and energy boom")
        print("‚Ä¢ 2015-2016: Oil price collapse affecting energy regions")
        print("‚Ä¢ 2015-present: Major tech migration to Texas")
        print("‚Ä¢ 2020-2021: COVID-19 pandemic with Texas resilience")
        print("‚Ä¢ 2021-present: Massive population growth and development")
        print("‚Ä¢ Ongoing: Business-friendly policies attracting companies")
        
        # 7. Recommandations strat√©giques
        print("\n7. üí° STRATEGIC RECOMMENDATIONS:")
        if "√©nergie" in self.config["specialites"]:
            print("‚Ä¢ Diversify beyond oil and gas dependence")
            print("‚Ä¢ Invest in renewable energy transition")
        if "technologie" in self.config["specialites"]:
            print("‚Ä¢ Continue attracting tech companies and talent")
            print("‚Ä¢ Develop innovation districts and tech hubs")
        if "manufacturing" in self.config["specialites"]:
            print("‚Ä¢ Support advanced manufacturing development")
            print("‚Ä¢ Invest in workforce training programs")
        
        print("‚Ä¢ Manage rapid growth with infrastructure investment")
        print("‚Ä¢ Maintain housing affordability through supply")
        print("‚Ä¢ Invest in transportation and water infrastructure")
        print("‚Ä¢ Support small business and entrepreneurship")
        print("‚Ä¢ Focus on sustainable development practices")

def main():
    """Fonction principale pour le Texas"""
    # Liste des r√©gions du Texas
    regions = ["Dallas-Fort Worth", "Houston Metro", "Austin Area", "San Antonio", 
               "El Paso Area", "Rio Grande Valley", "West Texas", "Central Texas"]
    
    print("ü§† TEXAS REAL ESTATE ANALYSIS - MAJOR REGIONS (2002-2025)")
    print("=" * 70)
    
    # Demander √† l'utilisateur de choisir une r√©gion
    print("Available regions:")
    for i, region in enumerate(regions, 1):
        print(f"{i}. {region}")
    
    try:
        choice = int(input("\nSelect the region number to analyze: "))
        if choice < 1 or choice > len(regions):
            raise ValueError
        selected_region = regions[choice-1]
    except (ValueError, IndexError):
        print("Invalid choice. Defaulting to Dallas-Fort Worth.")
        selected_region = "Dallas-Fort Worth"
    
    # Initialiser l'analyseur
    analyzer = TexasRealEstateAnalyzer(selected_region)
    
    # G√©n√©rer les donn√©es
    real_estate_data = analyzer.generate_financial_data()
    
    # Sauvegarder les donn√©es
    output_file = f'{selected_region.replace(" ", "_").lower()}_texas_data_2002_2025.csv'
    real_estate_data.to_csv(output_file, index=False)
    print(f"üíæ Data saved: {output_file}")
    
    # Aper√ßu des donn√©es
    print("\nüëÄ Data preview:")
    print(real_estate_data[['Year', 'Population', 'Median_Home_Price', 'Home_Sales_Volume', 'Total_Revenue']].head())
    
    # Cr√©er l'analyse
    print("\nüìà Creating Texas real estate analysis...")
    analyzer.create_financial_analysis(real_estate_data)
    
    print(f"\n‚úÖ Analysis of {selected_region}, Texas completed!")
    print(f"üìä Period: {analyzer.start_year}-{analyzer.end_year}")
    print("üè† Data: Demographics, real estate market, investments, regional economics")

if __name__ == "__main__":
    main()